{"version":3,"sources":["../src/index.ts","../src/Identifier.ts","../src/services/save/SaveManager.ts","../src/services/save/LocalForageSave.ts","../src/services/save/LocalStorageSave.ts"],"sourcesContent":["import {AxModule} from \"axolotis-module-definition\";\r\nimport {ContainerModule, interfaces} from \"inversify\";\r\nimport {SaveManagerName} from \"./Identifier\";\r\nimport {SaveManager} from \"./services/save/SaveManager\";\r\n\r\nexport * from \"./services/save/SaveManager\";\r\n\r\nexport * from \"./Identifier\";\r\n\r\nexport * from \"./services/save/LocalStorageSave\";\r\nexport * from \"./services/save/LocalForageSave\";\r\nexport * from \"./services/save/SaveAbstractionLevel\";\r\n\r\nexport class AxSaveModule implements AxModule{\r\n    getModule(): ContainerModule {\r\n        return new ContainerModule((bind: interfaces.Bind) => {\r\n            bind(SaveManagerName).to(SaveManager).inSingletonScope();\r\n        });\r\n    }\r\n}\r\n","export const SaveManagerName = Symbol.for(\"SaveManagerName\");\r\n","import {saveAs} from 'file-saver';\r\nimport {SerializerEngine, SerializerEngineName} from \"@aptero/axolotis-module-serializer\";\r\nimport {SaveAbstractionLevel} from \"./SaveAbstractionLevel\";\r\nimport {LocalForageSave} from \"./LocalForageSave\";\r\nimport {inject, injectable} from \"inversify\";\r\nimport {makeid} from \"@aptero/axolotis-module-id-generator\";\r\n\r\nexport interface SaveMeta {\r\n    name: string,\r\n    date: Date,\r\n    id: string\r\n}\r\n\r\nexport interface Savable<T> {\r\n    save(): T,\r\n\r\n    load(json: T): void,\r\n}\r\n\r\nexport interface SaveStructure {\r\n    id: string;\r\n    version: string,\r\n    name: string,\r\n    date: string,\r\n    zgame: Record<string, any>\r\n}\r\n\r\nconst SAVE_PREFIX = \"SAVE-\";\r\nconst LAST_SAVE = \"1-LAST-SAVE\";\r\nconst LATEST_VERSION = \"1.0.0\";\r\n\r\n@injectable()\r\nexport class SaveManager {\r\n    dataToSave: { key: string, data: Savable<any> }[] = [];\r\n    saveApi: SaveAbstractionLevel = new LocalForageSave();\r\n\r\n    constructor(@inject(SerializerEngineName) private serializeEngine: SerializerEngine) {\r\n    }\r\n\r\n    /**\r\n     * Order matter the load will be done in the same order\r\n     * @param key\r\n     * @param data\r\n     */\r\n    registerSavable(key: string, data: Savable<any>) {\r\n        if (!data) throw new Error();\r\n        this.dataToSave.push({key, data});\r\n    }\r\n\r\n    async isCreateNew(): Promise<boolean> {\r\n        return !await this.saveApi.getItem(LAST_SAVE);\r\n    }\r\n\r\n    async saveAsFile(id: string) {\r\n        const item = await this.saveApi.getItem(SAVE_PREFIX + id);\r\n        //Only simple deserialization with JSON parse since we only needs the meta data.\r\n        const json = JSON.parse(item);\r\n        const blob = new Blob([item], {type: \"application/json\"});\r\n        //https://www.npmjs.com/package/file-saver\r\n        saveAs(blob, json.name + \".json\");\r\n    }\r\n\r\n    /**\r\n     * Returns the save id (to be loaded) must call load(id: string) to load this save\r\n     * @param file\r\n     */\r\n    async loadFromFile(file: File):Promise<string> {\r\n        let text = await new Promise<string>(resolve => {\r\n            const reader = new FileReader();\r\n            reader.onload = function (evt) {\r\n                resolve(evt.target.result as string);\r\n            }\r\n            reader.readAsText(file, \"UTF-8\");\r\n        });\r\n        return this.loadFromString(text);\r\n    }\r\n\r\n    /**\r\n     * Returns the save id (to be loaded)\r\n     * @param data\r\n     */\r\n    async loadFromString(data: string): Promise<string> {\r\n        // Generate a unique ID for this save\r\n        const id = makeid(10);\r\n        // Store the parsed save data\r\n        await this.saveApi.setItem(SAVE_PREFIX + id, data);\r\n        JSON.parse(data);//format checker only should be a json\r\n        return id;\r\n    }\r\n\r\n\r\n    async load(id: string) {\r\n        await this.setLastSave(id);\r\n        const save = await this.saveApi.getItem(SAVE_PREFIX + id);\r\n        let item: SaveStructure = JSON.parse(save);\r\n        if (item.version !== LATEST_VERSION) {\r\n            throw new Error(\"Incompatibility between save version: \" + item.version + \"/\" + LATEST_VERSION);\r\n            //TODO implement version migrator\r\n        }\r\n        console.log(\"loading save : \" + item.name + \" / \" + item.id);\r\n        for (const data of this.dataToSave) {\r\n            let storedData = this.serializeEngine.deserialize(item.zgame[data.key]);\r\n            data.data.load(storedData);\r\n        }\r\n    }\r\n\r\n    async save(id: string = null, name: string = \"New Save\"): Promise<string> {\r\n        await this.setLastSave(id);\r\n        let save: SaveStructure;\r\n        if (!id) {\r\n            //create new save overwrite otherwise\r\n            id = makeid(10);\r\n            save = {\r\n                version: LATEST_VERSION,\r\n                name,\r\n                id,\r\n                date: new Date().toISOString(),\r\n                zgame: {}\r\n            }\r\n        } else {\r\n            //Only simple deserialization with JSON parse since we only needs the meta data.\r\n            const previous = JSON.parse(await this.saveApi.getItem(SAVE_PREFIX + id));\r\n            save = {\r\n                version: LATEST_VERSION,\r\n                name: previous.name,\r\n                id,\r\n                date: new Date().toISOString(),\r\n                zgame: {}\r\n            }\r\n        }\r\n        for (const data of this.dataToSave) {\r\n            save.zgame[data.key] = this.serializeEngine.serialize(data.data.save());\r\n        }\r\n        await this.saveApi.setItem(SAVE_PREFIX + id, JSON.stringify(save));\r\n        return id;\r\n    }\r\n\r\n    async listSaves(): Promise<SaveMeta[]> {\r\n        let ret = [];\r\n        for (const key of await this.saveApi.keys()) {\r\n            if (key.startsWith(SAVE_PREFIX)) {\r\n                //Only simple deserialization with JSON parse since we only needs the meta data.\r\n                let save: SaveStructure = JSON.parse(await this.saveApi.getItem(key)) as any;\r\n                ret.push({\r\n                    id: save.id,\r\n                    name: save.name,\r\n                    date: new Date(save.date)\r\n                })\r\n            }\r\n        }\r\n        ret.sort(function (a, b) {\r\n            return b.date - a.date;\r\n        });\r\n        return ret;\r\n    }\r\n\r\n    async fetchLastSave() {\r\n        if (!await this.saveApi.getItem(LAST_SAVE)) {\r\n            const saveMetas = await this.listSaves();\r\n            if (saveMetas.length > 0) {\r\n                //load the latest save in memory\r\n                await this.setLastSave(saveMetas[0].id);\r\n            } else {\r\n                //create a new game on load it\r\n                await this.setLastSave(await this.save(null));\r\n            }\r\n        }\r\n    }\r\n\r\n    async saveLast() {\r\n        await this.fetchLastSave();\r\n        await this.save(await this.saveApi.getItem(LAST_SAVE));\r\n    }\r\n\r\n    async loadLast() {\r\n        await this.fetchLastSave();\r\n        const saveId = await this.saveApi.getItem(LAST_SAVE);\r\n        await this.load(saveId);\r\n    }\r\n\r\n    async setLastSave(id: string): Promise<void> {\r\n        await this.saveApi.setItem(LAST_SAVE, id);\r\n    }\r\n\r\n    async delete(id: string) {\r\n        console.log(\"delete : \" + SAVE_PREFIX + id);\r\n        await this.saveApi.removeItem(SAVE_PREFIX + id);\r\n    }\r\n}\r\n","import {SaveAbstractionLevel} from \"./SaveAbstractionLevel\";\r\nimport * as localforage from \"localforage\";\r\n\r\n\r\nexport class LocalForageSave implements SaveAbstractionLevel {\r\n    //https://localforage.github.io/localForage/#localforage\r\n    private localforage: LocalForage;\r\n    constructor() {\r\n        this.localforage = localforage.createInstance({\r\n            name: \"saves\"\r\n        });\r\n    }\r\n\r\n    async getItem(key: string): Promise<string> {\r\n        return this.localforage.getItem(key);\r\n    }\r\n\r\n    async setItem(key: string, value: string): Promise<string> {\r\n        return this.localforage.setItem(key, value);\r\n    }\r\n\r\n    async removeItem(key: string): Promise<void> {\r\n        return this.localforage.removeItem(key);\r\n    }\r\n\r\n    async keys(): Promise<string[]> {\r\n        return this.localforage.keys();\r\n    }\r\n}\r\n","import {SaveAbstractionLevel} from \"./SaveAbstractionLevel\";\r\n\r\nexport class LocalStorageSave implements SaveAbstractionLevel {\r\n\r\n    //https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\r\n\r\n    async getItem(key: string): Promise<string> {\r\n        return localStorage.getItem(key);\r\n    }\r\n\r\n    async setItem(key: string, value: string): Promise<string> {\r\n        localStorage.setItem(key, value);\r\n        return value;\r\n    }\r\n\r\n    async removeItem(key: string): Promise<void> {\r\n        return localStorage.removeItem(key);\r\n    }\r\n\r\n    async keys(): Promise<string[]> {\r\n        //return localStorage as any as string[];\r\n        throw new Error();\r\n    }\r\n}\r\n"],"mappings":"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","names":["src_exports","__export","AxSaveModule","LocalForageSave","LocalStorageSave","SaveManager","SaveManagerName","__toCommonJS","import_inversify","SaveManagerName","import_file_saver","import_axolotis_module_serializer","localforage","LocalForageSave","key","value","import_inversify","import_axolotis_module_id_generator","SAVE_PREFIX","LAST_SAVE","LATEST_VERSION","SaveManager","serializeEngine","LocalForageSave","key","data","id","item","json","blob","file","text","resolve","reader","evt","save","storedData","name","previous","ret","a","b","saveMetas","saveId","__decorateClass","__decorateParam","LocalStorageSave","key","value","AxSaveModule","bind","SaveManagerName","SaveManager"]}