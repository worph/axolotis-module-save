{"version":3,"sources":["../src/index.ts","../src/Identifier.ts","../src/services/save/SaveManager.ts","../src/services/save/LocalForageSave.ts"],"sourcesContent":["import {AxModule} from \"axolotis-module-definition\";\r\nimport {ContainerModule, interfaces} from \"inversify\";\r\nimport {SaveManagerName} from \"./Identifier\";\r\nimport {SaveManager} from \"./services/save/SaveManager\";\r\n\r\nexport * from \"./services/save/SaveManager\";\r\n\r\nexport * from \"./Identifier\";\r\n\r\nexport class AxSaveModule implements AxModule{\r\n    getModule(): ContainerModule {\r\n        return new ContainerModule((bind: interfaces.Bind) => {\r\n            bind(SaveManagerName).to(SaveManager).inSingletonScope();\r\n        });\r\n    }\r\n}\r\n","export const SaveManagerName = Symbol.for(\"SaveManagerName\");\r\n","import {saveAs} from 'file-saver';\r\nimport {SerializerEngine, SerializerEngineName} from \"@aptero/axolotis-module-serializer\";\r\nimport {SerializableType} from \"@aptero/axolotis-module-serializer\";\r\nimport {SaveAbstractionLevel} from \"./SaveAbstractionLevel\";\r\nimport {LocalForageSave} from \"./LocalForageSave\";\r\nimport {inject, injectable} from \"inversify\";\r\nimport {makeid} from \"@aptero/axolotis-module-id-generator\";\r\n\r\nexport interface SaveMeta {\r\n    name: string,\r\n    date: Date,\r\n    id: string\r\n}\r\n\r\nexport interface Savable<T> {\r\n    save(): T,\r\n\r\n    load(json: T): void,\r\n}\r\n\r\nexport interface SaveStructure extends SerializableType {\r\n    id: string;\r\n    version: string,\r\n    name: string,\r\n    date: string,\r\n    zgame: { [id: string]: string }\r\n}\r\n\r\nconst SAVE_PREFIX = \"SAVE-\";\r\nconst LAST_SAVE = \"1-LAST-SAVE\";\r\nconst LATEST_VERSION = \"1.0.0\";\r\n\r\n@injectable()\r\nexport class SaveManager {\r\n    dataToSave: { key: string, data: Savable<any> }[] = [];\r\n    saveApi: SaveAbstractionLevel = new LocalForageSave();\r\n\r\n    constructor(@inject(SerializerEngineName) private serializeEngine: SerializerEngine) {\r\n    }\r\n\r\n    registerSavable(key: string, data: Savable<any>) {\r\n        if (!data) throw new Error();\r\n        this.dataToSave.push({key, data});\r\n    }\r\n\r\n    async isCreateNew(): Promise<boolean> {\r\n        return !await this.saveApi.getItem(LAST_SAVE);\r\n    }\r\n\r\n    async saveAsFile(id: string) {\r\n        const item = await this.saveApi.getItem(SAVE_PREFIX + id);\r\n        //Only simple deserialization with JSON parse since we only needs the meta data.\r\n        const json = JSON.parse(item);\r\n        const blob = new Blob([item], {type: \"application/json\"});\r\n        //https://www.npmjs.com/package/file-saver\r\n        saveAs(blob, json.name + \".json\");\r\n    }\r\n\r\n    loadAsFile() {\r\n        //TODO\r\n        throw new Error(\"unimplemented\")\r\n    }\r\n\r\n    async load(id: string) {\r\n        await this.setLastSave(id);\r\n        let item: SaveStructure = this.serializeEngine.deserializeFromString<SaveStructure>(await this.saveApi.getItem(SAVE_PREFIX + id));\r\n        if (item.version !== LATEST_VERSION) {\r\n            throw new Error(\"Incompatibility between save version: \" + item.version + \"/\" + LATEST_VERSION);\r\n            //TODO implement version migrator\r\n        }\r\n        console.log(\"loading save : \" + item.name + \" / \" + item.id);\r\n        for (const data of this.dataToSave) {\r\n            let storedData = item.zgame[data.key];\r\n            data.data.load(storedData);\r\n        }\r\n    }\r\n\r\n    async save(id: string = null, name: string = \"New Save\"): Promise<string> {\r\n        await this.setLastSave(id);\r\n        let save: SaveStructure;\r\n        if (!id) {\r\n            //create new save overwrite otherwise\r\n            id = makeid(10);\r\n            save = {\r\n                version: LATEST_VERSION,\r\n                serializeID: null,\r\n                name,\r\n                id,\r\n                date: new Date().toISOString(),\r\n                zgame: {}\r\n            }\r\n        } else {\r\n            //Only simple deserialization with JSON parse since we only needs the meta data.\r\n            const previous = JSON.parse(await this.saveApi.getItem(SAVE_PREFIX + id));\r\n            save = {\r\n                version: LATEST_VERSION,\r\n                serializeID: null,\r\n                name: previous.name,\r\n                id,\r\n                date: new Date().toISOString(),\r\n                zgame: {}\r\n            }\r\n        }\r\n        for (const data of this.dataToSave) {\r\n            save.zgame[data.key] = data.data.save();\r\n        }\r\n        await this.saveApi.setItem(SAVE_PREFIX + id, this.serializeEngine.serializeToString(save));\r\n        return id;\r\n    }\r\n\r\n    async listSaves(): Promise<SaveMeta[]> {\r\n        let ret = [];\r\n        for (const key of await this.saveApi.keys()) {\r\n            if (key.startsWith(SAVE_PREFIX)) {\r\n                //Only simple deserialization with JSON parse since we only needs the meta data.\r\n                let save: SaveStructure = JSON.parse(await this.saveApi.getItem(key)) as any;\r\n                ret.push({\r\n                    id: save.id,\r\n                    name: save.name,\r\n                    date: new Date(save.date)\r\n                })\r\n            }\r\n        }\r\n        ret.sort(function (a, b) {\r\n            return b.date - a.date;\r\n        });\r\n        return ret;\r\n    }\r\n\r\n    async fetchLastSave() {\r\n        if (!await this.saveApi.getItem(LAST_SAVE)) {\r\n            const saveMetas = await this.listSaves();\r\n            if (saveMetas.length > 0) {\r\n                //load the latest save in memory\r\n                await this.setLastSave(saveMetas[0].id);\r\n            } else {\r\n                //create a new game on load it\r\n                await this.setLastSave(await this.save(null));\r\n            }\r\n        }\r\n    }\r\n\r\n    async saveLast() {\r\n        await this.fetchLastSave();\r\n        await this.save(await this.saveApi.getItem(LAST_SAVE));\r\n    }\r\n\r\n    async loadLast() {\r\n        await this.fetchLastSave();\r\n        const saveId = await this.saveApi.getItem(LAST_SAVE);\r\n        await this.load(saveId);\r\n    }\r\n\r\n    async setLastSave(id: string): Promise<void> {\r\n        await this.saveApi.setItem(LAST_SAVE, id);\r\n    }\r\n\r\n    async delete(id: string) {\r\n        console.log(\"delete : \" + SAVE_PREFIX + id);\r\n        await this.saveApi.removeItem(SAVE_PREFIX + id);\r\n    }\r\n}\r\n","import {SaveAbstractionLevel} from \"./SaveAbstractionLevel\";\r\nimport * as localforage from \"localforage\";\r\n\r\n\r\nexport class LocalForageSave implements SaveAbstractionLevel {\r\n    //https://localforage.github.io/localForage/#localforage\r\n    private localforage: LocalForage;\r\n    constructor() {\r\n        this.localforage = localforage.createInstance({\r\n            name: \"saves\"\r\n        });\r\n    }\r\n\r\n    async getItem(key: string): Promise<string> {\r\n        return this.localforage.getItem(key);\r\n    }\r\n\r\n    async setItem(key: string, value: string): Promise<string> {\r\n        return this.localforage.setItem(key, value);\r\n    }\r\n\r\n    async removeItem(key: string): Promise<void> {\r\n        return this.localforage.removeItem(key);\r\n    }\r\n\r\n    async keys(): Promise<string[]> {\r\n        return this.localforage.keys();\r\n    }\r\n}\r\n"],"mappings":"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","names":["ContainerModule","SaveManagerName","saveAs","SerializerEngineName","localforage","LocalForageSave","key","value","inject","injectable","makeid","SAVE_PREFIX","LAST_SAVE","LATEST_VERSION","SaveManager","serializeEngine","LocalForageSave","key","data","id","item","json","blob","saveAs","storedData","name","save","makeid","previous","ret","a","b","saveMetas","saveId","__decorateClass","injectable","__decorateParam","inject","SerializerEngineName","AxSaveModule","ContainerModule","bind","SaveManagerName","SaveManager"]}